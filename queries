--***********************
-- Database
--**********************
USE UNIVERSITY;

--************************************
-- Table Creation Scripts (8 tables)
--************************************

-- Create Departments Table First
CREATE TABLE Departments (
    DepartmentID  INTEGER PRIMARY KEY AUTO_INCREMENT,
    DepartmentName VARCHAR(100) NOT NULL UNIQUE
);

-- Create StudentStatus Table Before Students
CREATE TABLE StudentStatus (
    StatusID      INTEGER PRIMARY KEY AUTO_INCREMENT,
    StatusName    VARCHAR(20) NOT NULL UNIQUE
);

-- Create Semesters Table Before Courses
CREATE TABLE Semesters (
    SemesterID    INTEGER PRIMARY KEY AUTO_INCREMENT,
    SemesterName  VARCHAR(20) NOT NULL UNIQUE,
    Year          INTEGER CHECK (Year >= 2000)
);

-- Create Professors Table Before Courses
CREATE TABLE Professors (
    ProfessorID   INTEGER PRIMARY KEY AUTO_INCREMENT,
    FirstName     VARCHAR(50) NOT NULL,
    LastName      VARCHAR(50) NOT NULL,
    Email         VARCHAR(100) UNIQUE NOT NULL,
    DepartmentID  INTEGER NOT NULL,
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID) ON DELETE CASCADE
);

-- Create Students Table
CREATE TABLE Students (
    StudentID     INTEGER PRIMARY KEY AUTO_INCREMENT,
    FirstName     VARCHAR(50) NOT NULL,
    LastName      VARCHAR(50) NOT NULL,
    DOB           DATE NOT NULL,
    Email         VARCHAR(100) UNIQUE NOT NULL,
    DepartmentID  INTEGER NOT NULL,
    StatusID      INTEGER NOT NULL,
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID) ON DELETE CASCADE,
    FOREIGN KEY (StatusID) REFERENCES StudentStatus(StatusID) ON DELETE CASCADE
);

-- Create Courses Table
CREATE TABLE Courses (
    CourseID      INTEGER PRIMARY KEY AUTO_INCREMENT,
    CourseName    VARCHAR(100) NOT NULL,
    Credits       INTEGER CHECK (Credits > 0),
    DepartmentID  INTEGER NOT NULL,
    ProfessorID   INTEGER NOT NULL,
    SemesterID    INTEGER NOT NULL,
    FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID) ON DELETE CASCADE,
    FOREIGN KEY (ProfessorID) REFERENCES Professors(ProfessorID) ON DELETE CASCADE,
    FOREIGN KEY (SemesterID) REFERENCES Semesters(SemesterID) ON DELETE CASCADE
);

-- Create Enrollments Table
CREATE TABLE Enrollments (
    EnrollmentID  INTEGER PRIMARY KEY AUTO_INCREMENT,
    StudentID     INTEGER NOT NULL,
    CourseID      INTEGER NOT NULL,
    Grade         VARCHAR(2),
    FOREIGN KEY (StudentID) REFERENCES Students(StudentID) ON DELETE CASCADE,
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID) ON DELETE CASCADE
);

-- Create Classrooms Table
CREATE TABLE Classrooms (
    ClassroomID   INTEGER PRIMARY KEY AUTO_INCREMENT,
    RoomNumber    VARCHAR(10) NOT NULL UNIQUE,
    Capacity      INTEGER CHECK (Capacity > 0),
    BuildingName  VARCHAR(50) NOT NULL
);


--*************************
-- Data Insertion
--*************************

-- Insert Departments
INSERT INTO Departments (DepartmentName) VALUES
('Computer Science'),
('Mechanical Engineering'),
('Electrical Engineering'),
('Physics'),
('Mathematics');

-- Insert StudentStatus
INSERT INTO StudentStatus (StatusName) VALUES
('Full-Time'),
('Part-Time'),
('Graduated');

-- Insert Semesters
INSERT INTO Semesters (SemesterName, Year) VALUES
('Spring 2024', 2024),
('Fall 2024', 2024);

-- Insert Professors
INSERT INTO Professors (FirstName, LastName, Email, DepartmentID) VALUES
('Alice', 'Smith', 'alice.smith@university.edu', 1),
('Bob', 'Johnson', 'bob.johnson@university.edu', 2),
('Charlie', 'Brown', 'charlie.brown@university.edu', 3),
('David', 'Miller', 'david.miller@university.edu', 4);

-- Insert Students
INSERT INTO Students (FirstName, LastName, DOB, Email, DepartmentID, StatusID) VALUES
('John', 'Doe', '2000-01-15', 'john.doe@university.edu', 1, 1),
('Jane', 'Doe', '2001-05-22', 'jane.doe@university.edu', 2, 1),
('Sam', 'Wilson', '1999-07-30', 'sam.wilson@university.edu', 3, 2),
('Emily', 'Davis', '1998-09-10', 'emily.davis@university.edu', 4, 3);

-- Insert Courses
INSERT INTO Courses (CourseName, Credits, DepartmentID, ProfessorID, SemesterID) VALUES
('Data Structures', 3, 1, 1, 1),
('Thermodynamics', 4, 2, 2, 2),
('Circuit Analysis', 3, 3, 3, 1),
('Quantum Mechanics', 4, 4, 4, 2);

-- Insert Enrollments
INSERT INTO Enrollments (StudentID, CourseID, Grade) VALUES
(1, 1, 'A'),
(2, 2, 'B'),
(3, 3, 'C'),
(4, 4, 'B');

-- Insert more Departments
INSERT INTO Departments (DepartmentName) VALUES
('Biotechnology'),
('Civil Engineering');

-- Insert more StudentStatus
INSERT INTO StudentStatus (StatusName) VALUES
('Dropped Out'),
('Exchange Student');

-- Insert more Semesters
INSERT INTO Semesters (SemesterName, Year) VALUES
('Spring 2025', 2025),
('Fall 2025', 2025);

-- Insert more Professors
INSERT INTO Professors (FirstName, LastName, Email, DepartmentID) VALUES
('Eve', 'Anderson', 'eve.anderson@university.edu', 5),
('Frank', 'Harris', 'frank.harris@university.edu', 6),
('Grace', 'White', 'grace.white@university.edu', 1),
('Henry', 'Moore', 'henry.moore@university.edu', 2);

-- Insert more Students
INSERT INTO Students (FirstName, LastName, DOB, Email, DepartmentID, StatusID) VALUES
('Michael', 'Scott', '1997-03-12', 'michael.scott@university.edu', 5, 1),
('Sarah', 'Lee', '2002-08-05', 'sarah.lee@university.edu', 6, 2),
('Tom', 'Holland', '2001-11-17', 'tom.holland@university.edu', 1, 3),
('Olivia', 'Brown', '2000-06-21', 'olivia.brown@university.edu', 2, 4),
('Daniel', 'Clark', '1999-12-15', 'daniel.clark@university.edu', 3, 5);

-- Insert more Courses
INSERT INTO Courses (CourseName, Credits, DepartmentID, ProfessorID, SemesterID) VALUES
('Genetic Engineering', 3, 5, 5, 3),
('Structural Analysis', 4, 6, 6, 4),
('Machine Learning', 3, 1, 7, 3),
('Heat Transfer', 4, 2, 8, 4);

-- Insert more Enrollments
INSERT INTO Enrollments (StudentID, CourseID, Grade) VALUES
(5, 5, 'A'),
(6, 6, 'B'),
(7, 7, 'A'),
(8, 8, 'C'),
(9, 1, 'B'),
(1, 6, 'A'),
(2, 7, 'B'),
(3, 8, 'C');

-- Insert Classrooms
INSERT INTO Classrooms (RoomNumber, Capacity, BuildingName) VALUES
('A101', 50, 'Engineering Block'),
('B202', 40, 'Science Block'),
('C303', 60, 'Main Campus'),
('D404', 30, 'Library Wing'),
('E505', 80, 'Technology Building'),
('F606', 100, 'Research Complex'),
('G707', 25, 'Mathematics Wing');


--*************************
-- Indexes
--*************************

CREATE INDEX idx_student_name ON Students (FirstName, LastName);
CREATE INDEX idx_course_enrollment ON Enrollments (CourseID, StudentID);
CREATE INDEX idx_course_schedule ON Courses (CourseName, Credits);

--*************************
-- Basic Queries (Insert, Update, Delete)
--*************************

-- Insert a new student
INSERT INTO Students (FirstName, LastName, DOB, Email, DepartmentID, StatusID)
VALUES ('Michael', 'Jordan', '2001-02-17', 'michael.jordan@university.edu', 2, 1);

-- Update student status
UPDATE Students 
SET StatusID = 2 
WHERE StudentID = 1;

-- Delete a student
DELETE FROM Students WHERE StudentID = 4;

--*************************
-- Using Indexes in Queries
--*************************

SELECT * FROM Students FORCE INDEX (idx_student_name) WHERE FirstName = 'John';
SELECT * FROM Enrollments FORCE INDEX (idx_course_enrollment) WHERE CourseID = 1;
SELECT * FROM Courses FORCE INDEX (idx_course_schedule) WHERE Credits > 3;

--*************************
-- Views
--*************************

-- View displaying students enrolled in each department
CREATE VIEW StudentEnrolledInDepartment AS
SELECT Students.FirstName, Students.LastName, Departments.DepartmentName 
FROM Students 
JOIN Departments ON Students.DepartmentID = Departments.DepartmentID;

-- View displaying available courses with professors and departments
CREATE VIEW CourseDetails AS
SELECT Courses.CourseName, Courses.Credits, Professors.FirstName AS ProfessorFirstName, 
       Professors.LastName AS ProfessorLastName, Departments.DepartmentName, Semesters.SemesterName, Semesters.Year
FROM Courses
JOIN Professors ON Courses.ProfessorID = Professors.ProfessorID
JOIN Departments ON Courses.DepartmentID = Departments.DepartmentID
JOIN Semesters ON Courses.SemesterID = Semesters.SemesterID;

-- View displaying the number of students enrolled in each course
CREATE VIEW NumberOfStudentsPerCourse AS
SELECT Courses.CourseName, COUNT(Enrollments.StudentID) AS NumberOfStudents
FROM Courses
JOIN Enrollments ON Courses.CourseID = Enrollments.CourseID
GROUP BY Courses.CourseName;

-- Additional Aggregate Queries
SELECT DepartmentName, AVG(Credits) AS AvgCredits FROM Courses
JOIN Departments ON Courses.DepartmentID = Departments.DepartmentID
GROUP BY DepartmentName;

SELECT CourseName, SUM(Credits) AS TotalCredits FROM Courses
GROUP BY CourseName;

-- Additional Group By and Having Queries
SELECT SemesterName, COUNT(*) AS TotalCourses
FROM Semesters
JOIN Courses ON Semesters.SemesterID = Courses.SemesterID
GROUP BY SemesterName
HAVING COUNT(*) > 1;

SELECT DepartmentName, COUNT(*) AS TotalProfessors
FROM Professors
JOIN Departments ON Professors.DepartmentID = Departments.DepartmentID
GROUP BY DepartmentName
HAVING COUNT(*) > 0;


